version: "3.9"

services:
  db:
    image: postgres:15
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-intellivision}
      - POSTGRES_USER=${POSTGRES_USER:-adminvision}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: "0.4"
          memory: 512M

  redis:
    image: redis:7
    ports:
      - "127.0.0.1:6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: 512M

  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "127.0.0.1:6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    healthcheck:
      test: ["CMD", "true"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: "0.1"
          memory: 256M

  web:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - shared-tmp:/tmp
      - ./intellivision/media:/app/intellivision/media # Mount to where Apache expects files
      - ./intellivision/apps/video_analytics/models:/app/intellivision/apps/video_analytics/models # Persist model files
      - ./logs:/app/intellivision/logs
    ports:
      - "8001:8001"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "1.5"
          memory: 6G
        reservations:
          memory: 2G
    command: sh -c "/usr/local/bin/gunicorn intellivision.wsgi:application --bind 0.0.0.0:8001 --workers 2 --max-requests 100 --max-requests-jitter 10 --timeout 120 --keep-alive 5"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    environment:
      - PYTHONPATH=/app/intellivision:/app
      - POSTGRES_DB=${POSTGRES_DB:-intellivision}
      - POSTGRES_USER=${POSTGRES_USER:-adminvision}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - QDRANT_URL=http://qdrant:6333
      - MONGO_URI=${MONGO_URI}
      - YOLO_CACHE_DIR=/app/intellivision/apps/video_analytics/models/yolo_cache
      - JOB_OUTPUT_DIR=/app/intellivision/media/outputs
      - SERVICE_TYPE=web
      - ENVIRONMENT=production

  celery:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A intellivision worker --loglevel=warning --concurrency=3
    volumes:
      - shared-tmp:/tmp
      - ./intellivision/media:/app/intellivision/media # Mount to where Apache expects files
      - ./intellivision/apps/video_analytics/models:/app/intellivision/apps/video_analytics/models # Persist model files
      - ./logs:/app/intellivision/logs
    # runtime: nvidia  # Using --gpus flag instead (modern approach)
    environment:
      # - NVIDIA_VISIBLE_DEVICES=all  # Not needed with --gpus flag
      # - NVIDIA_DRIVER_CAPABILITIES=compute,utility  # Not needed with --gpus flag
      - PYTHONPATH=/app/intellivision:/app
      - POSTGRES_DB=${POSTGRES_DB:-intellivision}
      - POSTGRES_USER=${POSTGRES_USER:-adminvision}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - QDRANT_URL=http://qdrant:6333
      - MONGO_URI=${MONGO_URI}
      - YOLO_CACHE_DIR=/app/intellivision/apps/video_analytics/models/yolo_cache
      - JOB_OUTPUT_DIR=/app/intellivision/media/outputs
      - SERVICE_TYPE=celery
      - ENVIRONMENT=production
      - CUDA_LAUNCH_BLOCKING=1 # For debugging CUDA-related segfaults
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "celery", "-A", "intellivision", "inspect", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: "2.8"
          memory: 16G
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  frontend:
    build:
      context: ./intelli-vision
      dockerfile: Dockerfile
      args:
        - VITE_API_BASE_URL=${VITE_API_BASE_URL:-https://intellivision.aionos.co/api}
    ports:
      - "8080:8080"
    volumes:
      - ./intellivision/media:/app/intellivision/media # Mount to where Apache expects files
    environment:
      - NODE_ENV=production
      - VITE_PORT=8080
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-https://intellivision.aionos.co/api}
    healthcheck:
      test: ["CMD", "true"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: 512M
    depends_on:
      - web

volumes:
  postgres_data:
  qdrant_data:
  shared-tmp:
